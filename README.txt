In this project, I create a module that takes in sevaral commands involving a graph and Dijkstra's shortest path alrorithm. There exists a command that reads a set of integers from a file which are then used to construct a graph's agency list. This graph is then used for the command that performs Dijkstra's shortest path algorithm, found in the graph.cpp file, from a given source to a destination. The algorithm initializes all the nodes in the graph and then uses the DeleteMin function found in the heap.cpp file to extract the node with the shortest distance value. This node is then stored into an array and the nodes adjacent nodes are then relaxed. This occurs for all the nodes in the array, while making sure an extracted node is never relaxed, until the shortest paths to each node from the source is found. Based on the given command, the algorithm either returns the shortest path from a source node to a destination or returns a string containing the nodes along the shortest path from a source to a destination. A path is non-existent if the distance from a source to a destination is equal to infinity i.e the max value an int can have, which was given to the distance values of the nodes when they were initialized in Dijkstra's shortest path algorithm. There also exists a command that prints the adjacency list of the graph where the corresponding function is found in the heap.cpp file. 